//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include <string>
#include "HistoryUnit.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "VirtualTrees"
#pragma resource "*.dfm"
using namespace std;
TMainForm *MainForm;
sqlite3* Database;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
	VirtualStringTree->NodeDataSize = sizeof(NodeStruct);
}
//---------------------------------------------------------------------------

void StringTreeFilling (TVirtualStringTree * stringTreePtr)
{
	sqlite3_stmt *pStatement;
	stringTreePtr->Clear();
	int openResult = sqlite3_open16(L"History", &Database);

	if(openResult == SQLITE_OK)
	{
		ShowMessage(L"База данных открыта!");
	}
	else
	{
		ShowMessage(L"База данных НЕ открыта!");
	}

	int execResult = sqlite3_prepare_v2(Database,
										"SELECT urls.id, urls.url, urls.title, urls.last_vivsit_time FROM urls",
										-1,
										&pStatement,
										NULL);
	if(execResult != SQLITE_OK)
	{
		const char *errormsg = sqlite3_errmsg(Database);
		ShowMessage(errormsg);
	}

	int stepResult = SQLITE_DONE;
	stringTreePtr->BeginUpdate();
	while(true)
	{
		PVirtualNode entryNode = stringTreePtr->AddChild(stringTreePtr->RootNode);
		NodeStruct *NodePtr = (NodeStruct * ) stringTreePtr->GetNodeData(entryNode);
		int stepResult = sqlite3_step(pStatement);
		if (stepResult != SQLITE_ROW)
		{
			break;
		}
		NodePtr->Id;
		NodePtr->URL = UnicodeString(reinterpret_cast<const wchar_t*>(sqlite3_column_text16(pStatement, 1)));
		NodePtr->Title = UnicodeString(reinterpret_cast<const wchar_t*>(sqlite3_column_text16(pStatement, 2)));
		NodePtr->last_visit_time = sqlite3_column_int64(pStatement, 3);
	}
	stringTreePtr->EndUpdate();
	sqlite3_finalize(pStatement);

}

void DeleteRecord (TVirtualStringTree * stringTreePtr)
{
	PVirtualNode selectedNode = stringTreePtr->FocusedNode;
	unsigned int selectNodeIndex = selectedNode->Index;
	sqlite3_stmt *pStatement;
	NodeStruct *DeleteRecordPtr = (NodeStruct*)stringTreePtr->GetNodeData(selectedNode);
	int execResult = sqlite3_prepare_v2(Database,
										"DELETE FROM urls WHERE id = ?;",
										-1,
										&pStatement,
										NULL);
	if(execResult == SQLITE_OK)
	{
		sqlite3_bind_int64(pStatement, 1, DeleteRecordPtr->id);
		sqlite3_step(pStatement);
		sqlite3_finalize(pStatement);
		stringTreePtr->DeleteNode(selectedNode);
	}
	else
	{
		const char *errormsg = sqlite3_errmsg(Database);
		ShowMessage(errormsg);
		sqlite3_finalize(pStatement);

    }
}

void __fastcall TMainForm::OpenHistoryButtonClick(TObject *Sender)
{
    StringTreeFilling(VirtualStringTree);
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Text(TBaseVirtualTree *Sender, PVirtualNode Node, TColumnIndex Column,
          TVSTTextType TextType, UnicodeString &CellText)
{
	  if (!Node) return;
	  NodeStruct *nodeDataPtr = (NodeStruct*)Sender->GetNodeData(Node);
	  switch (Column)
	  {
			case 0: CellText = nodeDataPtr->URL; break;
			case 1: CellText = nodeDataPtr->Title; break;

	  default:
		  ;
	  }
}
//---------------------------------------------------------------------------


